// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: msg-lake.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MsgLake_Publish_FullMethodName   = "/MsgLake/Publish"
	MsgLake_Subscribe_FullMethodName = "/MsgLake/Subscribe"
)

// MsgLakeClient is the client API for MsgLake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgLakeClient interface {
	Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishRes, error)
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (MsgLake_SubscribeClient, error)
}

type msgLakeClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgLakeClient(cc grpc.ClientConnInterface) MsgLakeClient {
	return &msgLakeClient{cc}
}

func (c *msgLakeClient) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishRes, error) {
	out := new(PublishRes)
	err := c.cc.Invoke(ctx, MsgLake_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgLakeClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (MsgLake_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MsgLake_ServiceDesc.Streams[0], MsgLake_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &msgLakeSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MsgLake_SubscribeClient interface {
	Recv() (*SubscribeRes, error)
	grpc.ClientStream
}

type msgLakeSubscribeClient struct {
	grpc.ClientStream
}

func (x *msgLakeSubscribeClient) Recv() (*SubscribeRes, error) {
	m := new(SubscribeRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MsgLakeServer is the server API for MsgLake service.
// All implementations must embed UnimplementedMsgLakeServer
// for forward compatibility
type MsgLakeServer interface {
	Publish(context.Context, *PublishReq) (*PublishRes, error)
	Subscribe(*SubscribeReq, MsgLake_SubscribeServer) error
	mustEmbedUnimplementedMsgLakeServer()
}

// UnimplementedMsgLakeServer must be embedded to have forward compatible implementations.
type UnimplementedMsgLakeServer struct {
}

func (UnimplementedMsgLakeServer) Publish(context.Context, *PublishReq) (*PublishRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMsgLakeServer) Subscribe(*SubscribeReq, MsgLake_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMsgLakeServer) mustEmbedUnimplementedMsgLakeServer() {}

// UnsafeMsgLakeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgLakeServer will
// result in compilation errors.
type UnsafeMsgLakeServer interface {
	mustEmbedUnimplementedMsgLakeServer()
}

func RegisterMsgLakeServer(s grpc.ServiceRegistrar, srv MsgLakeServer) {
	s.RegisterService(&MsgLake_ServiceDesc, srv)
}

func _MsgLake_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgLakeServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgLake_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgLakeServer).Publish(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgLake_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MsgLakeServer).Subscribe(m, &msgLakeSubscribeServer{stream})
}

type MsgLake_SubscribeServer interface {
	Send(*SubscribeRes) error
	grpc.ServerStream
}

type msgLakeSubscribeServer struct {
	grpc.ServerStream
}

func (x *msgLakeSubscribeServer) Send(m *SubscribeRes) error {
	return x.ServerStream.SendMsg(m)
}

// MsgLake_ServiceDesc is the grpc.ServiceDesc for MsgLake service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgLake_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MsgLake",
	HandlerType: (*MsgLakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _MsgLake_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MsgLake_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "msg-lake.proto",
}
